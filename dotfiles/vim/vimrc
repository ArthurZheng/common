set fenc=utf-8
scriptencoding utf-8
set encoding=utf-8

"let $PATH .= expand(":$HOME/go/bin:$HOME/.path")
"let $GOPATH = expand(":$HOME/go")

" Vundle!
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

"UI
Plugin 'tomasr/molokai'
Plugin 'altercation/vim-colors-solarized'

Plugin 'kien/ctrlp.vim'
Plugin 'ervandew/supertab'

Plugin 'fholgado/minibufexpl.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'myusuf3/numbers.vim'
Plugin 'majutsushi/tagbar'

"Plugin 'chrisbra/unicode.vim'

"Languages
Plugin 'fatih/vim-go'
Plugin 'leafgarland/typescript-vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'pangloss/vim-javascript'
Plugin 'groenewege/vim-less'
Plugin 'derekwyatt/vim-scala'
Plugin 'gijsk/mozjs-syntax'
Plugin 'rust-lang/rust.vim'
Plugin 'hdima/python-syntax'
Plugin 'avakhov/vim-yaml'
"Plugin 'javacomplete'

"Util
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'shime/vim-livedown'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'godlygeek/tabular'

Plugin 'scrooloose/syntastic'
call vundle#end()
let g:gofmt_command = "goimports"
set rtp+=$GOROOT/misc/vim
filetype plugin indent on
syntax on

set incsearch
"set hlsearch

" Powerline
let g:airline_powerline_fonts = 1 

set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

""""
" Numbers
let g:numbers_exclude = ['tagbar', 'gundo', 'minibufexpl', 'nerdtree', 'netrw', 'help']

" Typescript
set rtp+=/usr/local/lib/node_modules/typescript-tools

set splitright
set number
set mouse=a
set t_Co=256

" Tabs by default
set tabstop=4 softtabstop=4 shiftwidth=4

let g:miniBufExplBuffersNeeded = 1
let g:netrw_liststyle = 3

" display indentation guides
set list listchars=tab:·\ ,trail:·,extends:>,precedes:>,nbsp:·

" My Maps
noremap <PageUp> :bprev!<CR>
noremap <PageDown> :bnext!<CR>
imap <PageUp> <Nop>
imap <PageDown> <Nop>

" Toggle Vexplore with Ctrl-E
nnoremap <leader>] :NERDTreeToggle<CR>
nnoremap <silent> <Leader>x :Bclose<CR>

" Copy and Paste
vnoremap <C-c> "+Y
noremap <C-c> "+y
noremap <C-v> "+p

func! Focus(direction_i3,direction_vim)
  let oldw = winnr()
  silent exe 'wincmd ' . a:direction_vim
  let neww = winnr()
  if oldw == neww
    silent exe '!i3-msg -q focus ' . a:direction_i3
    if !has("gui_running")
        redraw!
    endif
  endif
endfunction

func! ParamLeft()
	echo "LEFT"
	echo search('[,\(]', 'b', line("w0"))
endfunction
func! ParamRight()
	echo search('[,\)]', '', line("w0"))
endfunction

"  (p3, "p1", p4, p2)
" back to leading , or (
" if backwards, do it again
" move one right
" insert a -%- marker
" re order parameters, beginning at marker
" put the marker back where the cursor should end up
" move to the marker, and delete it
" Would be better to run :s from the cursor to EOL
noremap p] ?[,(]<cr>li-%-<Esc>:s/\v-\%-([ ]?)([^,)]+)([,)][ ]?)([^,)]+)/\1\4\3-\%-\2/<cr>/-%-<cr>d3l
noremap p[ ?[,(]<cr>nli-%-<Esc>:s/\v-\%-([ ]?)([^,)]+)([,)][ ]?)([^,)]+)/\1-\%-\4\3\2/<cr>/-%-<cr>d3l

map gwu :call Focus('up', 'k')<CR>
map gwd :call Focus('down', 'j')<CR>
map gwl :call Focus('left', 'h')<CR>
map gwr :call Focus('right', 'l')<CR>


" Lazy shift key :-)
command! W w

function! SetECMA6 ()
	setfiletype ecma6
	setlocal syntax=javascript
endfunction
" Non default file type Load Mappings
augroup fileTypes
	au!
	au BufRead,BufNewFile *.md setlocal filetype=markdown
	au BufRead,BufNewFile *.ts setlocal filetype=typescript
	au BufRead,BufNewFile *.es6 call SetECMA6()
augroup END


" Autocomplete like Bash
set wildmode=longest,list,full
set wildmenu
set completeopt=longest,menuone

" Super Tab
"let g:SuperTabDefaultCompletionType = "<C-x><C-o>"
let g:SuperTabDefaultCompletionType = "context"
"let g:SuperTabLongestHighlight = 1

" Colors
if has("gui_running") || &t_Co >= 256
	silent! colorscheme molokai
endif

"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/

highlight Cursor guifg=white guibg=black
highlight iCursor guifg=white guibg=steelblue

set guicursor=n-v-c:block-Cursor
set guicursor=i:ver25-iCursor

" Insert Mode Colors
augroup insertMode
	au!
	au InsertEnter * hi StatusLine term=reverse guifg=Orange guibg=Black
	au InsertLeave * hi StatusLine term=reverse guifg=Black guibg=Green
augroup END

hi StatusLine term=reverse guifg=Black guibg=Green


